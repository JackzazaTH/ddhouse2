import { useState } from 'react'
import Modal from './Modal'
import Toast from './Toast'
import { Api } from '@/lib/api'
import { save, load } from '@/lib/local'

type Priv = '‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î‡∏û‡∏¥‡πÄ‡∏®‡∏©' | '‡∏≠‡∏±‡∏õ‡πÄ‡∏Å‡∏£‡∏î‡∏ß‡∏±‡∏™‡∏î‡∏∏‡∏ü‡∏£‡∏µ' | '‡∏ú‡πà‡∏≠‡∏ô‡∏ä‡∏≥‡∏£‡∏∞‡∏¢‡∏∑‡∏î‡∏´‡∏¢‡∏∏‡πà‡∏ô' | '‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏Å‡πâ‡∏ü‡∏£‡∏µ'

export default function PromoForm(){
  const [form, setForm] = useState({
    name: '', phone: '', email: '',
    type: '‡∏ö‡πâ‡∏≤‡∏ô‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß', province: '', budget: '2-3 ‡∏•‡πâ‡∏≤‡∏ô',
    privileges: [] as Priv[], agree: false
  })
  const [success, setSuccess] = useState(false)
  const [toast, setToast] = useState<string | undefined>()

  const togglePrivilege = (p: Priv) => {
    setForm(f => ({
      ...f,
      privileges: f.privileges.includes(p) ? f.privileges.filter(x => x!==p) : [...f.privileges, p]
    }))
  }

  const submit = async (e: React.FormEvent) => {
    e.preventDefault()
    if(!form.name || !form.phone || !form.agree){
      setToast('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠/‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£ ‡πÅ‡∏•‡∏∞‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç'); return
    }
    const payload = { ...form, createdAt: new Date().toISOString() }
    const res = await Api.submitForm(payload)
    // fallback store
    const existing = load<any[]>('forms', [])
    existing.unshift({ id: cryptoRandomId(), ...payload, persisted: res.persisted ?? false })
    save('forms', existing)
    setSuccess(true)
  }

  return (
    <section id="promo" className="max-w-6xl mx-auto px-4">
      <div className="card p-6 md:p-8">
        <div className="mb-6">
          <h2 className="text-2xl font-bold text-white">‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏û‡∏¥‡πÄ‡∏®‡∏©</h2>
          <p className="text-foreground/80">‡πÅ‡∏ö‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡∏ö‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å (‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏î) ‚Äî ‡∏´‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡∏´‡∏•‡∏±‡∏á‡∏ö‡πâ‡∏≤‡∏ô</p>
        </div>
        <form onSubmit={submit} className="grid md:grid-cols-2 gap-4">
          <div>
            <label className="block text-sm mb-1">‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•</label>
            <input className="input" placeholder="‡∏™‡∏°‡∏ä‡∏≤‡∏¢ ‡πÉ‡∏à‡∏î‡∏µ" value={form.name} onChange={e=>setForm({...form, name:e.target.value})}/>
          </div>
          <div>
            <label className="block text-sm mb-1">‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£</label>
            <input className="input" placeholder="08x-xxx-xxxx" value={form.phone} onChange={e=>setForm({...form, phone:e.target.value})}/>
          </div>
          <div>
            <label className="block text-sm mb-1">‡∏≠‡∏µ‡πÄ‡∏°‡∏• (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)</label>
            <input className="input" placeholder="name@example.com" value={form.email} onChange={e=>setForm({...form, email:e.target.value})}/>
          </div>
          <div>
            <label className="block text-sm mb-1">‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î</label>
            <input className="input" placeholder="‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏Ø" value={form.province} onChange={e=>setForm({...form, province:e.target.value})}/>
          </div>
          <div>
            <label className="block text-sm mb-1">‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó</label>
            <select className="select" value={form.type} onChange={e=>setForm({...form, type:e.target.value})}>
              <option>‡∏ö‡πâ‡∏≤‡∏ô‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß</option>
              <option>‡∏ó‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏Æ‡∏°</option>
              <option>‡∏£‡∏µ‡πÇ‡∏ô‡πÄ‡∏ß‡∏ó</option>
            </select>
          </div>
          <div>
            <label className="block text-sm mb-1">‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡πÇ‡∏î‡∏¢‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì</label>
            <select className="select" value={form.budget} onChange={e=>setForm({...form, budget:e.target.value})}>
              <option>‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤ 2 ‡∏•‡πâ‡∏≤‡∏ô</option>
              <option>2-3 ‡∏•‡πâ‡∏≤‡∏ô</option>
              <option>3-5 ‡∏•‡πâ‡∏≤‡∏ô</option>
              <option>‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 5 ‡∏•‡πâ‡∏≤‡∏ô</option>
            </select>
          </div>
          <div className="md:col-span-2">
            <label className="block text-sm mb-2">‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏ó‡∏µ‡πà‡∏™‡∏ô‡πÉ‡∏à</label>
            <div className="flex flex-wrap gap-2">
              {(['‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î‡∏û‡∏¥‡πÄ‡∏®‡∏©','‡∏≠‡∏±‡∏õ‡πÄ‡∏Å‡∏£‡∏î‡∏ß‡∏±‡∏™‡∏î‡∏∏‡∏ü‡∏£‡∏µ','‡∏ú‡πà‡∏≠‡∏ô‡∏ä‡∏≥‡∏£‡∏∞‡∏¢‡∏∑‡∏î‡∏´‡∏¢‡∏∏‡πà‡∏ô','‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏Å‡πâ‡∏ü‡∏£‡∏µ'] as Priv[]).map(p=>(
                <button key={p} type="button"
                  onClick={()=>togglePrivilege(p)}
                  className={`px-3 py-1 rounded-full border ${form.privileges.includes(p)?'bg-brand text-white border-transparent':'bg-transparent text-foreground border-border'}`}>{p}</button>
              ))}
            </div>
          </div>
          <div className="md:col-span-2 flex items-center gap-2">
            <input id="agree" type="checkbox" checked={form.agree} onChange={e=>setForm({...form, agree:e.target.checked})}/>
            <label htmlFor="agree" className="text-sm text-foreground/90">‡∏â‡∏±‡∏ô‡∏¢‡∏¥‡∏ô‡∏¢‡∏≠‡∏°‡πÉ‡∏´‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏Å‡∏•‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡πÑ‡∏ß‡πâ</label>
          </div>
          <div className="md:col-span-2">
            <button className="btn w-full">‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå</button>
          </div>
        </form>
      </div>

      <Modal open={success} onClose={()=>setSuccess(false)} title="‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à üéâ">
        <p className="text-foreground/90">‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô ‡∏ó‡∏µ‡∏°‡∏á‡∏≤‡∏ô‡∏à‡∏∞‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏Å‡∏•‡∏±‡∏ö‡πÇ‡∏î‡∏¢‡πÄ‡∏£‡πá‡∏ß‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î</p>
        <div className="mt-4 flex justify-end">
          <button className="btn" onClick={()=>setSuccess(false)}>‡∏õ‡∏¥‡∏î</button>
        </div>
      </Modal>
      <Toast text={toast}/>
    </section>
  )
}

function cryptoRandomId() {
  const arr = new Uint8Array(8)
  crypto.getRandomValues(arr)
  return [...arr].map(b => b.toString(16).padStart(2,'0')).join('')
}
